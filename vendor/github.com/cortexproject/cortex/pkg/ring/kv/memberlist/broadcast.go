package memberlist

import (
	"fmt"

	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/log/level"
	"github.com/hashicorp/memberlist"
)

type ringBroadcast struct {
	logger   log.Logger
	key      string
	content  []string // Description of what is stored in this value. Used for invalidation.
	version  uint     // local version of the value, generated by merging this change
	msg      []byte   // encoded key and value
	finished func(b ringBroadcast)
}

func (r ringBroadcast) Invalidates(b memberlist.Broadcast) bool {
	if rb, ok := b.(ringBroadcast); ok {
		if r.key != rb.key {
			return false
		}

		// if this ringBroadcast covers same (or more) ingesters than rb, and is of newer version => true
		for _, ing := range r.content {
			found := false
			for _, oing := range rb.content {
				if ing == oing {
					found = true
					break
				}
			}

			if !found {
				return false
			}
		}

		// only do this check if this ringBroadcast covers same ingesters as 'b'
		// otherwise, we may be invalidating some older messages, which however covered different
		// ingesters
		if r.version >= rb.version {
			level.Debug(r.logger).Log("msg", "Invalidating forwarded broadcast", "key", r.key, "version", r.version, "oldVersion", rb.version, "content", fmt.Sprintf("%v", rb.content))
			return true
		}
	}
	return false
}

func (r ringBroadcast) Message() []byte {
	return r.msg
}

func (r ringBroadcast) Finished() {
	if r.finished != nil {
		r.finished(r)
	}
	r.msg = nil
}
